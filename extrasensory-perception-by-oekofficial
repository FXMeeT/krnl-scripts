local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local drawings = {}

local function invertColor(color)
    return Color3.new(1 - color.R, 1 - color.G, 1 - color.B)
end

local function getHealthColor(percentage)
    if percentage > 0.6 then
        return Color3.fromRGB(0, 255, 0)
    elseif percentage > 0.3 then
        return Color3.fromRGB(255, 255, 0)
    else
        return Color3.fromRGB(255, 0, 0)
    end
end

local function getScreenBounds(corner1, corner2)
    local topLeft = Vector2.new(math.min(corner1.X, corner2.X), math.min(corner1.Y, corner2.Y))
    local size = Vector2.new(math.abs(corner1.X - corner2.X), math.abs(corner1.Y - corner2.Y))
    return topLeft, size
end

RunService.RenderStepped:Connect(function()
    for _, player in pairs(Players:GetPlayers()) do
        local char = player.Character
        local head = char and char:FindFirstChild("Head")
        local hum = char and char:FindFirstChildOfClass("Humanoid")

        if player ~= LocalPlayer and head and hum then
            local headSize = head.Size
            local headCF = head.CFrame
            local bodyCF, bodySize = char:GetBoundingBox()

            local headCorners = {
                headCF:PointToWorldSpace(Vector3.new(-headSize.X/2, -headSize.Y/2, -headSize.Z/2)),
                headCF:PointToWorldSpace(Vector3.new(headSize.X/2, headSize.Y/2, headSize.Z/2))
            }

            local bodyCorners = {
                bodyCF:PointToWorldSpace(Vector3.new(-bodySize.X/2, -bodySize.Y/2, -bodySize.Z/2)),
                bodyCF:PointToWorldSpace(Vector3.new(bodySize.X/2, bodySize.Y/2, bodySize.Z/2))
            }

            local head1, headOn1 = Camera:WorldToViewportPoint(headCorners[1])
            local head2, headOn2 = Camera:WorldToViewportPoint(headCorners[2])
            local body1, bodyOn1 = Camera:WorldToViewportPoint(bodyCorners[1])
            local body2, bodyOn2 = Camera:WorldToViewportPoint(bodyCorners[2])

            if headOn1 and headOn2 and bodyOn1 and bodyOn2 then
                -- Initialize drawings if needed
                if not drawings[player] then
                    drawings[player] = {
                        HeadBox = Drawing.new("Square"),
                        BodyBox = Drawing.new("Square"),
                        Name = Drawing.new("Text"),
                        Distance = Drawing.new("Text"),
                        HealthText = Drawing.new("Text")
                    }

                    drawings[player].HeadBox.Thickness = 1
                    drawings[player].HeadBox.Color = Color3.fromRGB(0, 0, 255)
                    drawings[player].HeadBox.Filled = false

                    drawings[player].BodyBox.Thickness = 1
                    drawings[player].BodyBox.Color = Color3.fromRGB(255, 0, 0)
                    drawings[player].BodyBox.Filled = false

                    drawings[player].Name.Size = 16
                    drawings[player].Name.Center = true
                    drawings[player].Name.Outline = true
                    drawings[player].Name.Color = Color3.fromRGB(255, 255, 0)

                    drawings[player].Distance.Size = 16
                    drawings[player].Distance.Center = true
                    drawings[player].Distance.Outline = true

                    drawings[player].HealthText.Size = 16
                    drawings[player].HealthText.Center = true
                    drawings[player].HealthText.Outline = true
                end

                local topLeftH, sizeH = getScreenBounds(head1, head2)
                local topLeftB, sizeB = getScreenBounds(body1, body2)

                -- Head box
                drawings[player].HeadBox.Position = topLeftH
                drawings[player].HeadBox.Size = sizeH
                drawings[player].HeadBox.Visible = true

                -- Body box
                drawings[player].BodyBox.Position = topLeftB
                drawings[player].BodyBox.Size = sizeB
                drawings[player].BodyBox.Visible = true

                -- Name
                local nameLabel = drawings[player].Name
                nameLabel.Text = player.Name
                nameLabel.Position = Vector2.new(topLeftH.X + sizeH.X/2, topLeftH.Y - 18)
                nameLabel.Visible = true

                -- Health Text above name
                local healthPerc = math.clamp(hum.Health / hum.MaxHealth, 0, 1)
                local healthText = drawings[player].HealthText
                healthText.Text = "Health: " .. tostring(math.floor(healthPerc * 100))
                healthText.Color = getHealthColor(healthPerc)
                healthText.Position = Vector2.new(topLeftH.X + sizeH.X/2, topLeftH.Y - 36)
                healthText.Visible = true

                -- Distance
                local rayOrigin = Camera.CFrame.Position
                local rayDir = (head.Position - rayOrigin).Unit * 500
                local result = Workspace:Raycast(rayOrigin, rayDir)
                local bgColor = result and result.Instance and result.Instance:IsA("BasePart") and result.Instance.Color or Color3.new(0, 0, 0)

                local distText = drawings[player].Distance
                distText.Text = tostring(math.floor((Camera.CFrame.Position - head.Position).Magnitude)) .. " studs"
                distText.Color = invertColor(bgColor)
                distText.Position = Vector2.new(topLeftB.X + sizeB.X / 2, topLeftB.Y + sizeB.Y + 2)
                distText.Visible = true
            else
                -- Hide if not visible
                for _, obj in pairs(drawings[player]) do
                    obj.Visible = false
                end
            end
        elseif drawings[player] then
            -- Hide if character invalid
            for _, obj in pairs(drawings[player]) do
                obj.Visible = false
            end
        end
    end
end)
